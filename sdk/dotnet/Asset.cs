// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Marmot
{
    [MarmotResourceType("marmot:index:Asset")]
    public partial class Asset : global::Pulumi.CustomResource
    {
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("environments")]
        public Output<ImmutableDictionary<string, Outputs.AssetEnvironment>?> Environments { get; private set; } = null!;

        [Output("externalLinks")]
        public Output<ImmutableArray<Outputs.ExternalLink>> ExternalLinks { get; private set; } = null!;

        [Output("lastSyncAt")]
        public Output<string?> LastSyncAt { get; private set; } = null!;

        [Output("metadata")]
        public Output<ImmutableDictionary<string, object>?> Metadata { get; private set; } = null!;

        [Output("mrn")]
        public Output<string> Mrn { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("resourceId")]
        public Output<string> ResourceId { get; private set; } = null!;

        [Output("schema")]
        public Output<ImmutableDictionary<string, object>?> Schema { get; private set; } = null!;

        [Output("services")]
        public Output<ImmutableArray<string>> Services { get; private set; } = null!;

        [Output("sources")]
        public Output<ImmutableArray<Outputs.AssetSource>> Sources { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a Asset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Asset(string name, AssetArgs args, CustomResourceOptions? options = null)
            : base("marmot:index:Asset", name, args ?? new AssetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Asset(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("marmot:index:Asset", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Asset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Asset Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Asset(name, id, options);
        }
    }

    public sealed class AssetArgs : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("environments")]
        private InputMap<Inputs.AssetEnvironmentArgs>? _environments;
        public InputMap<Inputs.AssetEnvironmentArgs> Environments
        {
            get => _environments ?? (_environments = new InputMap<Inputs.AssetEnvironmentArgs>());
            set => _environments = value;
        }

        [Input("externalLinks")]
        private InputList<Inputs.ExternalLinkArgs>? _externalLinks;
        public InputList<Inputs.ExternalLinkArgs> ExternalLinks
        {
            get => _externalLinks ?? (_externalLinks = new InputList<Inputs.ExternalLinkArgs>());
            set => _externalLinks = value;
        }

        [Input("metadata")]
        private InputMap<object>? _metadata;
        public InputMap<object> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<object>());
            set => _metadata = value;
        }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("schema")]
        private InputMap<object>? _schema;
        public InputMap<object> Schema
        {
            get => _schema ?? (_schema = new InputMap<object>());
            set => _schema = value;
        }

        [Input("services", required: true)]
        private InputList<string>? _services;
        public InputList<string> Services
        {
            get => _services ?? (_services = new InputList<string>());
            set => _services = value;
        }

        [Input("sources")]
        private InputList<Inputs.AssetSourceArgs>? _sources;
        public InputList<Inputs.AssetSourceArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.AssetSourceArgs>());
            set => _sources = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public AssetArgs()
        {
        }
        public static new AssetArgs Empty => new AssetArgs();
    }
}
