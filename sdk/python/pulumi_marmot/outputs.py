# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'AssetEnvironment',
    'AssetSource',
    'ExternalLink',
]

@pulumi.output_type
class AssetEnvironment(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str,
                 metadata: Optional[Mapping[str, Any]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "metadata")


@pulumi.output_type
class AssetSource(dict):
    def __init__(__self__, *,
                 name: str,
                 priority: Optional[int] = None,
                 properties: Optional[Mapping[str, Any]] = None):
        pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "properties")


@pulumi.output_type
class ExternalLink(dict):
    def __init__(__self__, *,
                 name: str,
                 url: str,
                 icon: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "url", url)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")


