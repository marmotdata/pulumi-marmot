# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'AssetEnvironmentArgs',
    'AssetEnvironmentArgsDict',
    'AssetSourceArgs',
    'AssetSourceArgsDict',
    'ExternalLinkArgs',
    'ExternalLinkArgsDict',
]

MYPY = False

if not MYPY:
    class AssetEnvironmentArgsDict(TypedDict):
        name: pulumi.Input[str]
        path: pulumi.Input[str]
        metadata: NotRequired[pulumi.Input[Mapping[str, Any]]]
elif False:
    AssetEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AssetEnvironmentArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 path: pulumi.Input[str],
                 metadata: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "metadata", value)


if not MYPY:
    class AssetSourceArgsDict(TypedDict):
        name: pulumi.Input[str]
        priority: NotRequired[pulumi.Input[int]]
        properties: NotRequired[pulumi.Input[Mapping[str, Any]]]
elif False:
    AssetSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AssetSourceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 priority: Optional[pulumi.Input[int]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "properties", value)


if not MYPY:
    class ExternalLinkArgsDict(TypedDict):
        name: pulumi.Input[str]
        url: pulumi.Input[str]
        icon: NotRequired[pulumi.Input[str]]
elif False:
    ExternalLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ExternalLinkArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 url: pulumi.Input[str],
                 icon: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "url", url)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)


