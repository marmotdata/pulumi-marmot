// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package marmot

import (
	"context"
	"reflect"

	"errors"
	"github.com/marmotdata/pulumi-marmot/sdk/go/marmot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Lineage struct {
	pulumi.CustomResourceState

	ResourceId pulumi.StringOutput    `pulumi:"resourceId"`
	Source     pulumi.StringOutput    `pulumi:"source"`
	Target     pulumi.StringOutput    `pulumi:"target"`
	Type       pulumi.StringPtrOutput `pulumi:"type"`
}

// NewLineage registers a new resource with the given unique name, arguments, and options.
func NewLineage(ctx *pulumi.Context,
	name string, args *LineageArgs, opts ...pulumi.ResourceOption) (*Lineage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Lineage
	err := ctx.RegisterResource("marmot:index:Lineage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLineage gets an existing Lineage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLineage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LineageState, opts ...pulumi.ResourceOption) (*Lineage, error) {
	var resource Lineage
	err := ctx.ReadResource("marmot:index:Lineage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Lineage resources.
type lineageState struct {
}

type LineageState struct {
}

func (LineageState) ElementType() reflect.Type {
	return reflect.TypeOf((*lineageState)(nil)).Elem()
}

type lineageArgs struct {
	Source string `pulumi:"source"`
	Target string `pulumi:"target"`
}

// The set of arguments for constructing a Lineage resource.
type LineageArgs struct {
	Source pulumi.StringInput
	Target pulumi.StringInput
}

func (LineageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lineageArgs)(nil)).Elem()
}

type LineageInput interface {
	pulumi.Input

	ToLineageOutput() LineageOutput
	ToLineageOutputWithContext(ctx context.Context) LineageOutput
}

func (*Lineage) ElementType() reflect.Type {
	return reflect.TypeOf((**Lineage)(nil)).Elem()
}

func (i *Lineage) ToLineageOutput() LineageOutput {
	return i.ToLineageOutputWithContext(context.Background())
}

func (i *Lineage) ToLineageOutputWithContext(ctx context.Context) LineageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineageOutput)
}

// LineageArrayInput is an input type that accepts LineageArray and LineageArrayOutput values.
// You can construct a concrete instance of `LineageArrayInput` via:
//
//	LineageArray{ LineageArgs{...} }
type LineageArrayInput interface {
	pulumi.Input

	ToLineageArrayOutput() LineageArrayOutput
	ToLineageArrayOutputWithContext(context.Context) LineageArrayOutput
}

type LineageArray []LineageInput

func (LineageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lineage)(nil)).Elem()
}

func (i LineageArray) ToLineageArrayOutput() LineageArrayOutput {
	return i.ToLineageArrayOutputWithContext(context.Background())
}

func (i LineageArray) ToLineageArrayOutputWithContext(ctx context.Context) LineageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineageArrayOutput)
}

// LineageMapInput is an input type that accepts LineageMap and LineageMapOutput values.
// You can construct a concrete instance of `LineageMapInput` via:
//
//	LineageMap{ "key": LineageArgs{...} }
type LineageMapInput interface {
	pulumi.Input

	ToLineageMapOutput() LineageMapOutput
	ToLineageMapOutputWithContext(context.Context) LineageMapOutput
}

type LineageMap map[string]LineageInput

func (LineageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lineage)(nil)).Elem()
}

func (i LineageMap) ToLineageMapOutput() LineageMapOutput {
	return i.ToLineageMapOutputWithContext(context.Background())
}

func (i LineageMap) ToLineageMapOutputWithContext(ctx context.Context) LineageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineageMapOutput)
}

type LineageOutput struct{ *pulumi.OutputState }

func (LineageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Lineage)(nil)).Elem()
}

func (o LineageOutput) ToLineageOutput() LineageOutput {
	return o
}

func (o LineageOutput) ToLineageOutputWithContext(ctx context.Context) LineageOutput {
	return o
}

func (o LineageOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Lineage) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

func (o LineageOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *Lineage) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

func (o LineageOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *Lineage) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

func (o LineageOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Lineage) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type LineageArrayOutput struct{ *pulumi.OutputState }

func (LineageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lineage)(nil)).Elem()
}

func (o LineageArrayOutput) ToLineageArrayOutput() LineageArrayOutput {
	return o
}

func (o LineageArrayOutput) ToLineageArrayOutputWithContext(ctx context.Context) LineageArrayOutput {
	return o
}

func (o LineageArrayOutput) Index(i pulumi.IntInput) LineageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Lineage {
		return vs[0].([]*Lineage)[vs[1].(int)]
	}).(LineageOutput)
}

type LineageMapOutput struct{ *pulumi.OutputState }

func (LineageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lineage)(nil)).Elem()
}

func (o LineageMapOutput) ToLineageMapOutput() LineageMapOutput {
	return o
}

func (o LineageMapOutput) ToLineageMapOutputWithContext(ctx context.Context) LineageMapOutput {
	return o
}

func (o LineageMapOutput) MapIndex(k pulumi.StringInput) LineageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Lineage {
		return vs[0].(map[string]*Lineage)[vs[1].(string)]
	}).(LineageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LineageInput)(nil)).Elem(), &Lineage{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineageArrayInput)(nil)).Elem(), LineageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineageMapInput)(nil)).Elem(), LineageMap{})
	pulumi.RegisterOutputType(LineageOutput{})
	pulumi.RegisterOutputType(LineageArrayOutput{})
	pulumi.RegisterOutputType(LineageMapOutput{})
}
