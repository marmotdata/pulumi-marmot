// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package marmot

import (
	"context"
	"reflect"

	"github.com/marmotdata/pulumi-marmot/sdk/go/marmot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AssetEnvironment struct {
	Metadata map[string]interface{} `pulumi:"metadata"`
	Name     string                 `pulumi:"name"`
	Path     string                 `pulumi:"path"`
}

// AssetEnvironmentInput is an input type that accepts AssetEnvironmentArgs and AssetEnvironmentOutput values.
// You can construct a concrete instance of `AssetEnvironmentInput` via:
//
//	AssetEnvironmentArgs{...}
type AssetEnvironmentInput interface {
	pulumi.Input

	ToAssetEnvironmentOutput() AssetEnvironmentOutput
	ToAssetEnvironmentOutputWithContext(context.Context) AssetEnvironmentOutput
}

type AssetEnvironmentArgs struct {
	Metadata pulumi.MapInput    `pulumi:"metadata"`
	Name     pulumi.StringInput `pulumi:"name"`
	Path     pulumi.StringInput `pulumi:"path"`
}

func (AssetEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetEnvironment)(nil)).Elem()
}

func (i AssetEnvironmentArgs) ToAssetEnvironmentOutput() AssetEnvironmentOutput {
	return i.ToAssetEnvironmentOutputWithContext(context.Background())
}

func (i AssetEnvironmentArgs) ToAssetEnvironmentOutputWithContext(ctx context.Context) AssetEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetEnvironmentOutput)
}

// AssetEnvironmentMapInput is an input type that accepts AssetEnvironmentMap and AssetEnvironmentMapOutput values.
// You can construct a concrete instance of `AssetEnvironmentMapInput` via:
//
//	AssetEnvironmentMap{ "key": AssetEnvironmentArgs{...} }
type AssetEnvironmentMapInput interface {
	pulumi.Input

	ToAssetEnvironmentMapOutput() AssetEnvironmentMapOutput
	ToAssetEnvironmentMapOutputWithContext(context.Context) AssetEnvironmentMapOutput
}

type AssetEnvironmentMap map[string]AssetEnvironmentInput

func (AssetEnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AssetEnvironment)(nil)).Elem()
}

func (i AssetEnvironmentMap) ToAssetEnvironmentMapOutput() AssetEnvironmentMapOutput {
	return i.ToAssetEnvironmentMapOutputWithContext(context.Background())
}

func (i AssetEnvironmentMap) ToAssetEnvironmentMapOutputWithContext(ctx context.Context) AssetEnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetEnvironmentMapOutput)
}

type AssetEnvironmentOutput struct{ *pulumi.OutputState }

func (AssetEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetEnvironment)(nil)).Elem()
}

func (o AssetEnvironmentOutput) ToAssetEnvironmentOutput() AssetEnvironmentOutput {
	return o
}

func (o AssetEnvironmentOutput) ToAssetEnvironmentOutputWithContext(ctx context.Context) AssetEnvironmentOutput {
	return o
}

func (o AssetEnvironmentOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v AssetEnvironment) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

func (o AssetEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AssetEnvironment) string { return v.Name }).(pulumi.StringOutput)
}

func (o AssetEnvironmentOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v AssetEnvironment) string { return v.Path }).(pulumi.StringOutput)
}

type AssetEnvironmentMapOutput struct{ *pulumi.OutputState }

func (AssetEnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AssetEnvironment)(nil)).Elem()
}

func (o AssetEnvironmentMapOutput) ToAssetEnvironmentMapOutput() AssetEnvironmentMapOutput {
	return o
}

func (o AssetEnvironmentMapOutput) ToAssetEnvironmentMapOutputWithContext(ctx context.Context) AssetEnvironmentMapOutput {
	return o
}

func (o AssetEnvironmentMapOutput) MapIndex(k pulumi.StringInput) AssetEnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AssetEnvironment {
		return vs[0].(map[string]AssetEnvironment)[vs[1].(string)]
	}).(AssetEnvironmentOutput)
}

type AssetSource struct {
	Name       string                 `pulumi:"name"`
	Priority   *int                   `pulumi:"priority"`
	Properties map[string]interface{} `pulumi:"properties"`
}

// AssetSourceInput is an input type that accepts AssetSourceArgs and AssetSourceOutput values.
// You can construct a concrete instance of `AssetSourceInput` via:
//
//	AssetSourceArgs{...}
type AssetSourceInput interface {
	pulumi.Input

	ToAssetSourceOutput() AssetSourceOutput
	ToAssetSourceOutputWithContext(context.Context) AssetSourceOutput
}

type AssetSourceArgs struct {
	Name       pulumi.StringInput `pulumi:"name"`
	Priority   pulumi.IntPtrInput `pulumi:"priority"`
	Properties pulumi.MapInput    `pulumi:"properties"`
}

func (AssetSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetSource)(nil)).Elem()
}

func (i AssetSourceArgs) ToAssetSourceOutput() AssetSourceOutput {
	return i.ToAssetSourceOutputWithContext(context.Background())
}

func (i AssetSourceArgs) ToAssetSourceOutputWithContext(ctx context.Context) AssetSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetSourceOutput)
}

// AssetSourceArrayInput is an input type that accepts AssetSourceArray and AssetSourceArrayOutput values.
// You can construct a concrete instance of `AssetSourceArrayInput` via:
//
//	AssetSourceArray{ AssetSourceArgs{...} }
type AssetSourceArrayInput interface {
	pulumi.Input

	ToAssetSourceArrayOutput() AssetSourceArrayOutput
	ToAssetSourceArrayOutputWithContext(context.Context) AssetSourceArrayOutput
}

type AssetSourceArray []AssetSourceInput

func (AssetSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetSource)(nil)).Elem()
}

func (i AssetSourceArray) ToAssetSourceArrayOutput() AssetSourceArrayOutput {
	return i.ToAssetSourceArrayOutputWithContext(context.Background())
}

func (i AssetSourceArray) ToAssetSourceArrayOutputWithContext(ctx context.Context) AssetSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetSourceArrayOutput)
}

type AssetSourceOutput struct{ *pulumi.OutputState }

func (AssetSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetSource)(nil)).Elem()
}

func (o AssetSourceOutput) ToAssetSourceOutput() AssetSourceOutput {
	return o
}

func (o AssetSourceOutput) ToAssetSourceOutputWithContext(ctx context.Context) AssetSourceOutput {
	return o
}

func (o AssetSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AssetSource) string { return v.Name }).(pulumi.StringOutput)
}

func (o AssetSourceOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AssetSource) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

func (o AssetSourceOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v AssetSource) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

type AssetSourceArrayOutput struct{ *pulumi.OutputState }

func (AssetSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetSource)(nil)).Elem()
}

func (o AssetSourceArrayOutput) ToAssetSourceArrayOutput() AssetSourceArrayOutput {
	return o
}

func (o AssetSourceArrayOutput) ToAssetSourceArrayOutputWithContext(ctx context.Context) AssetSourceArrayOutput {
	return o
}

func (o AssetSourceArrayOutput) Index(i pulumi.IntInput) AssetSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssetSource {
		return vs[0].([]AssetSource)[vs[1].(int)]
	}).(AssetSourceOutput)
}

type ExternalLink struct {
	Icon *string `pulumi:"icon"`
	Name string  `pulumi:"name"`
	Url  string  `pulumi:"url"`
}

// ExternalLinkInput is an input type that accepts ExternalLinkArgs and ExternalLinkOutput values.
// You can construct a concrete instance of `ExternalLinkInput` via:
//
//	ExternalLinkArgs{...}
type ExternalLinkInput interface {
	pulumi.Input

	ToExternalLinkOutput() ExternalLinkOutput
	ToExternalLinkOutputWithContext(context.Context) ExternalLinkOutput
}

type ExternalLinkArgs struct {
	Icon pulumi.StringPtrInput `pulumi:"icon"`
	Name pulumi.StringInput    `pulumi:"name"`
	Url  pulumi.StringInput    `pulumi:"url"`
}

func (ExternalLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalLink)(nil)).Elem()
}

func (i ExternalLinkArgs) ToExternalLinkOutput() ExternalLinkOutput {
	return i.ToExternalLinkOutputWithContext(context.Background())
}

func (i ExternalLinkArgs) ToExternalLinkOutputWithContext(ctx context.Context) ExternalLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalLinkOutput)
}

// ExternalLinkArrayInput is an input type that accepts ExternalLinkArray and ExternalLinkArrayOutput values.
// You can construct a concrete instance of `ExternalLinkArrayInput` via:
//
//	ExternalLinkArray{ ExternalLinkArgs{...} }
type ExternalLinkArrayInput interface {
	pulumi.Input

	ToExternalLinkArrayOutput() ExternalLinkArrayOutput
	ToExternalLinkArrayOutputWithContext(context.Context) ExternalLinkArrayOutput
}

type ExternalLinkArray []ExternalLinkInput

func (ExternalLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalLink)(nil)).Elem()
}

func (i ExternalLinkArray) ToExternalLinkArrayOutput() ExternalLinkArrayOutput {
	return i.ToExternalLinkArrayOutputWithContext(context.Background())
}

func (i ExternalLinkArray) ToExternalLinkArrayOutputWithContext(ctx context.Context) ExternalLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalLinkArrayOutput)
}

type ExternalLinkOutput struct{ *pulumi.OutputState }

func (ExternalLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalLink)(nil)).Elem()
}

func (o ExternalLinkOutput) ToExternalLinkOutput() ExternalLinkOutput {
	return o
}

func (o ExternalLinkOutput) ToExternalLinkOutputWithContext(ctx context.Context) ExternalLinkOutput {
	return o
}

func (o ExternalLinkOutput) Icon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalLink) *string { return v.Icon }).(pulumi.StringPtrOutput)
}

func (o ExternalLinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalLink) string { return v.Name }).(pulumi.StringOutput)
}

func (o ExternalLinkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalLink) string { return v.Url }).(pulumi.StringOutput)
}

type ExternalLinkArrayOutput struct{ *pulumi.OutputState }

func (ExternalLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalLink)(nil)).Elem()
}

func (o ExternalLinkArrayOutput) ToExternalLinkArrayOutput() ExternalLinkArrayOutput {
	return o
}

func (o ExternalLinkArrayOutput) ToExternalLinkArrayOutputWithContext(ctx context.Context) ExternalLinkArrayOutput {
	return o
}

func (o ExternalLinkArrayOutput) Index(i pulumi.IntInput) ExternalLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalLink {
		return vs[0].([]ExternalLink)[vs[1].(int)]
	}).(ExternalLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssetEnvironmentInput)(nil)).Elem(), AssetEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetEnvironmentMapInput)(nil)).Elem(), AssetEnvironmentMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetSourceInput)(nil)).Elem(), AssetSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetSourceArrayInput)(nil)).Elem(), AssetSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalLinkInput)(nil)).Elem(), ExternalLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalLinkArrayInput)(nil)).Elem(), ExternalLinkArray{})
	pulumi.RegisterOutputType(AssetEnvironmentOutput{})
	pulumi.RegisterOutputType(AssetEnvironmentMapOutput{})
	pulumi.RegisterOutputType(AssetSourceOutput{})
	pulumi.RegisterOutputType(AssetSourceArrayOutput{})
	pulumi.RegisterOutputType(ExternalLinkOutput{})
	pulumi.RegisterOutputType(ExternalLinkArrayOutput{})
}
