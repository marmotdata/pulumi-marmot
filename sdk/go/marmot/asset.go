// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package marmot

import (
	"context"
	"reflect"

	"errors"
	"github.com/marmotdata/pulumi-marmot/sdk/go/marmot/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Asset struct {
	pulumi.CustomResourceState

	CreatedAt     pulumi.StringOutput       `pulumi:"createdAt"`
	CreatedBy     pulumi.StringOutput       `pulumi:"createdBy"`
	Description   pulumi.StringPtrOutput    `pulumi:"description"`
	Environments  AssetEnvironmentMapOutput `pulumi:"environments"`
	ExternalLinks ExternalLinkArrayOutput   `pulumi:"externalLinks"`
	LastSyncAt    pulumi.StringPtrOutput    `pulumi:"lastSyncAt"`
	Metadata      pulumi.MapOutput          `pulumi:"metadata"`
	Mrn           pulumi.StringOutput       `pulumi:"mrn"`
	Name          pulumi.StringOutput       `pulumi:"name"`
	ResourceId    pulumi.StringOutput       `pulumi:"resourceId"`
	Schema        pulumi.MapOutput          `pulumi:"schema"`
	Services      pulumi.StringArrayOutput  `pulumi:"services"`
	Sources       AssetSourceArrayOutput    `pulumi:"sources"`
	Tags          pulumi.StringArrayOutput  `pulumi:"tags"`
	Type          pulumi.StringOutput       `pulumi:"type"`
	UpdatedAt     pulumi.StringOutput       `pulumi:"updatedAt"`
}

// NewAsset registers a new resource with the given unique name, arguments, and options.
func NewAsset(ctx *pulumi.Context,
	name string, args *AssetArgs, opts ...pulumi.ResourceOption) (*Asset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Services == nil {
		return nil, errors.New("invalid value for required argument 'Services'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Asset
	err := ctx.RegisterResource("marmot:index:Asset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAsset gets an existing Asset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAsset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssetState, opts ...pulumi.ResourceOption) (*Asset, error) {
	var resource Asset
	err := ctx.ReadResource("marmot:index:Asset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Asset resources.
type assetState struct {
}

type AssetState struct {
}

func (AssetState) ElementType() reflect.Type {
	return reflect.TypeOf((*assetState)(nil)).Elem()
}

type assetArgs struct {
	Description   *string                     `pulumi:"description"`
	Environments  map[string]AssetEnvironment `pulumi:"environments"`
	ExternalLinks []ExternalLink              `pulumi:"externalLinks"`
	Metadata      map[string]interface{}      `pulumi:"metadata"`
	Name          string                      `pulumi:"name"`
	Schema        map[string]interface{}      `pulumi:"schema"`
	Services      []string                    `pulumi:"services"`
	Sources       []AssetSource               `pulumi:"sources"`
	Tags          []string                    `pulumi:"tags"`
	Type          string                      `pulumi:"type"`
}

// The set of arguments for constructing a Asset resource.
type AssetArgs struct {
	Description   pulumi.StringPtrInput
	Environments  AssetEnvironmentMapInput
	ExternalLinks ExternalLinkArrayInput
	Metadata      pulumi.MapInput
	Name          pulumi.StringInput
	Schema        pulumi.MapInput
	Services      pulumi.StringArrayInput
	Sources       AssetSourceArrayInput
	Tags          pulumi.StringArrayInput
	Type          pulumi.StringInput
}

func (AssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assetArgs)(nil)).Elem()
}

type AssetInput interface {
	pulumi.Input

	ToAssetOutput() AssetOutput
	ToAssetOutputWithContext(ctx context.Context) AssetOutput
}

func (*Asset) ElementType() reflect.Type {
	return reflect.TypeOf((**Asset)(nil)).Elem()
}

func (i *Asset) ToAssetOutput() AssetOutput {
	return i.ToAssetOutputWithContext(context.Background())
}

func (i *Asset) ToAssetOutputWithContext(ctx context.Context) AssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetOutput)
}

// AssetArrayInput is an input type that accepts AssetArray and AssetArrayOutput values.
// You can construct a concrete instance of `AssetArrayInput` via:
//
//	AssetArray{ AssetArgs{...} }
type AssetArrayInput interface {
	pulumi.Input

	ToAssetArrayOutput() AssetArrayOutput
	ToAssetArrayOutputWithContext(context.Context) AssetArrayOutput
}

type AssetArray []AssetInput

func (AssetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Asset)(nil)).Elem()
}

func (i AssetArray) ToAssetArrayOutput() AssetArrayOutput {
	return i.ToAssetArrayOutputWithContext(context.Background())
}

func (i AssetArray) ToAssetArrayOutputWithContext(ctx context.Context) AssetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetArrayOutput)
}

// AssetMapInput is an input type that accepts AssetMap and AssetMapOutput values.
// You can construct a concrete instance of `AssetMapInput` via:
//
//	AssetMap{ "key": AssetArgs{...} }
type AssetMapInput interface {
	pulumi.Input

	ToAssetMapOutput() AssetMapOutput
	ToAssetMapOutputWithContext(context.Context) AssetMapOutput
}

type AssetMap map[string]AssetInput

func (AssetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Asset)(nil)).Elem()
}

func (i AssetMap) ToAssetMapOutput() AssetMapOutput {
	return i.ToAssetMapOutputWithContext(context.Background())
}

func (i AssetMap) ToAssetMapOutputWithContext(ctx context.Context) AssetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssetMapOutput)
}

type AssetOutput struct{ *pulumi.OutputState }

func (AssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Asset)(nil)).Elem()
}

func (o AssetOutput) ToAssetOutput() AssetOutput {
	return o
}

func (o AssetOutput) ToAssetOutputWithContext(ctx context.Context) AssetOutput {
	return o
}

func (o AssetOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Asset) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o AssetOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Asset) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

func (o AssetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Asset) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AssetOutput) Environments() AssetEnvironmentMapOutput {
	return o.ApplyT(func(v *Asset) AssetEnvironmentMapOutput { return v.Environments }).(AssetEnvironmentMapOutput)
}

func (o AssetOutput) ExternalLinks() ExternalLinkArrayOutput {
	return o.ApplyT(func(v *Asset) ExternalLinkArrayOutput { return v.ExternalLinks }).(ExternalLinkArrayOutput)
}

func (o AssetOutput) LastSyncAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Asset) pulumi.StringPtrOutput { return v.LastSyncAt }).(pulumi.StringPtrOutput)
}

func (o AssetOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v *Asset) pulumi.MapOutput { return v.Metadata }).(pulumi.MapOutput)
}

func (o AssetOutput) Mrn() pulumi.StringOutput {
	return o.ApplyT(func(v *Asset) pulumi.StringOutput { return v.Mrn }).(pulumi.StringOutput)
}

func (o AssetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Asset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AssetOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Asset) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

func (o AssetOutput) Schema() pulumi.MapOutput {
	return o.ApplyT(func(v *Asset) pulumi.MapOutput { return v.Schema }).(pulumi.MapOutput)
}

func (o AssetOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Asset) pulumi.StringArrayOutput { return v.Services }).(pulumi.StringArrayOutput)
}

func (o AssetOutput) Sources() AssetSourceArrayOutput {
	return o.ApplyT(func(v *Asset) AssetSourceArrayOutput { return v.Sources }).(AssetSourceArrayOutput)
}

func (o AssetOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Asset) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o AssetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Asset) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o AssetOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Asset) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type AssetArrayOutput struct{ *pulumi.OutputState }

func (AssetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Asset)(nil)).Elem()
}

func (o AssetArrayOutput) ToAssetArrayOutput() AssetArrayOutput {
	return o
}

func (o AssetArrayOutput) ToAssetArrayOutputWithContext(ctx context.Context) AssetArrayOutput {
	return o
}

func (o AssetArrayOutput) Index(i pulumi.IntInput) AssetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Asset {
		return vs[0].([]*Asset)[vs[1].(int)]
	}).(AssetOutput)
}

type AssetMapOutput struct{ *pulumi.OutputState }

func (AssetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Asset)(nil)).Elem()
}

func (o AssetMapOutput) ToAssetMapOutput() AssetMapOutput {
	return o
}

func (o AssetMapOutput) ToAssetMapOutputWithContext(ctx context.Context) AssetMapOutput {
	return o
}

func (o AssetMapOutput) MapIndex(k pulumi.StringInput) AssetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Asset {
		return vs[0].(map[string]*Asset)[vs[1].(string)]
	}).(AssetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssetInput)(nil)).Elem(), &Asset{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetArrayInput)(nil)).Elem(), AssetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssetMapInput)(nil)).Elem(), AssetMap{})
	pulumi.RegisterOutputType(AssetOutput{})
	pulumi.RegisterOutputType(AssetArrayOutput{})
	pulumi.RegisterOutputType(AssetMapOutput{})
}
