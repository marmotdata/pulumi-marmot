// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Asset extends pulumi.CustomResource {
    /**
     * Get an existing Asset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Asset {
        return new Asset(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'marmot:index:Asset';

    /**
     * Returns true if the given object is an instance of Asset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Asset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Asset.__pulumiType;
    }

    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly environments!: pulumi.Output<{[key: string]: outputs.AssetEnvironment} | undefined>;
    public readonly externalLinks!: pulumi.Output<outputs.ExternalLink[] | undefined>;
    public /*out*/ readonly lastSyncAt!: pulumi.Output<string | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: any} | undefined>;
    public /*out*/ readonly mrn!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly resourceId!: pulumi.Output<string>;
    public readonly schema!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly services!: pulumi.Output<string[]>;
    public readonly sources!: pulumi.Output<outputs.AssetSource[] | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a Asset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssetArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.services === undefined) && !opts.urn) {
                throw new Error("Missing required property 'services'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environments"] = args ? args.environments : undefined;
            resourceInputs["externalLinks"] = args ? args.externalLinks : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["lastSyncAt"] = undefined /*out*/;
            resourceInputs["mrn"] = undefined /*out*/;
            resourceInputs["resourceId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        } else {
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["environments"] = undefined /*out*/;
            resourceInputs["externalLinks"] = undefined /*out*/;
            resourceInputs["lastSyncAt"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["mrn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["resourceId"] = undefined /*out*/;
            resourceInputs["schema"] = undefined /*out*/;
            resourceInputs["services"] = undefined /*out*/;
            resourceInputs["sources"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Asset.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Asset resource.
 */
export interface AssetArgs {
    description?: pulumi.Input<string>;
    environments?: pulumi.Input<{[key: string]: pulumi.Input<inputs.AssetEnvironmentArgs>}>;
    externalLinks?: pulumi.Input<pulumi.Input<inputs.ExternalLinkArgs>[]>;
    metadata?: pulumi.Input<{[key: string]: any}>;
    name: pulumi.Input<string>;
    schema?: pulumi.Input<{[key: string]: any}>;
    services: pulumi.Input<pulumi.Input<string>[]>;
    sources?: pulumi.Input<pulumi.Input<inputs.AssetSourceArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
}
